{"version":3,"sources":["webpack://ccreddit-mod/./src/customFuncs/HeavenlyUpgrades/index.ts","webpack://ccreddit-mod/./src/main.ts","webpack://ccreddit-mod/./src/init/index.ts","webpack://ccreddit-mod/./src/init/createHook/index.ts","webpack://ccreddit-mod/./src/save/index.ts","webpack://ccreddit-mod/./src/load/index.ts"],"names":["data","forEach","upgradeData","desc","description","quote","icon","process","upgrade","Game","Upgrade","name","price","mod","pool","order","parents","parent","push","Upgrades","position","posX","posY","PrestigeUpgrades","CCRedditMod","init","HeavenlyUpgrades","save","saveObj","boughtUpgrades","unlockedUpgrades","UpgradesById","bought","unlocked","JSON","stringify","load","saveString","parse","Unlock","registerMod"],"mappings":"6HAoBA,QApByB,SAACA,GACzBA,EAAKC,SAAQ,SAAAC,GACZ,IAAMC,EAAO,GAAH,OAAMD,EAAYE,aAAlB,OAAgCF,EAAYG,MAAZ,aAA0BH,EAAYG,MAAtC,QAAoD,IACxFC,EAAkB,CAACJ,EAAYI,KAAK,GAAIJ,EAAYI,KAAK,GAAIC,mCAE7DC,EAAU,IAAIC,KAAKC,QAAQR,EAAYS,KAAMR,EAAMD,EAAYU,MAAON,GAC5EE,EAAQK,IAAM,eACdL,EAAQM,KAAO,WACfN,EAAQO,MAAQb,EAAYa,MAE5Bb,EAAYc,QAAQf,SAAQ,SAAAgB,GAC3BT,EAAQQ,QAAQE,KAAKT,KAAKU,SAASF,OAVT,I,IAAA,G,EAaIf,EAAYkB,S,EAbhB,E,kzBAa1BZ,EAAQa,KAbkB,KAaZb,EAAQc,KAbI,KAe3Bb,KAAKc,iBAAiBL,KAAKV,OCX7B,IAAMgB,EAAyB,CAC9BC,KCJY,WCCZC,EAAiB,CAChB,CACCf,KAAM,qBACNP,YAAa,kGACbC,MAAO,GACPO,MAAO,YACPN,KAAM,CAAC,EAAG,GACVU,QAAS,CAAC,uCACVI,SAAU,CAAC,GAAI,KACfL,MAAO,QFLTY,KGPY,WACZ,IAAMC,EAAiB,CACtBC,eAAgB,GAChBC,iBAAkB,IAenB,OAZArB,KAAKsB,aAAa9B,SAAQ,SAAAO,GACL,iBAAhBA,EAAQK,MACPL,EAAQwB,QACXJ,EAAQC,eAAeX,KAAKV,EAAQG,OAGhCH,EAAQwB,QAAUxB,EAAQyB,UAC9BL,EAAQE,iBAAiBZ,KAAKV,EAAQG,UAKlCuB,KAAKC,UAAUP,IHVtBQ,KIRY,SAACC,GACb,IAAMV,EAAcO,KAAKI,MAAMD,GAE/BV,EAAKG,iBAAiB7B,SAAQ,SAAAO,GAC7BC,KAAK8B,OAAO/B,MAEbmB,EAAKE,eAAe5B,SAAQ,SAAAO,GAC3BC,KAAKU,SAASX,GAASwB,OAAS,MJEjCN,oBAGDjB,KAAK+B,YAAY,eAAgBhB,I","file":"CCRedditMod.js","sourcesContent":["const HeavenlyUpgrades = (data: ICreateHeavenlyUpgradeDTO[]): void => {\n data.forEach(upgradeData => {\n  const desc = `${upgradeData.description}${upgradeData.quote ? `<q>${upgradeData.quote}</q>` : ''}`;\n  const icon: Game.Icon = [upgradeData.icon[0], upgradeData.icon[1], process.env.UPGRADE_ICONS_URL];\n\n  const upgrade = new Game.Upgrade(upgradeData.name, desc, upgradeData.price, icon);\n  upgrade.mod = 'ccreddit_mod';\n  upgrade.pool = 'prestige';\n  upgrade.order = upgradeData.order;\n\n  upgradeData.parents.forEach(parent => {\n   upgrade.parents.push(Game.Upgrades[parent]);\n  });\n\n  [upgrade.posX, upgrade.posY] = upgradeData.position;\n\n  Game.PrestigeUpgrades.push(upgrade);\n });\n};\n\nexport default HeavenlyUpgrades;\n","import init from './init';\nimport save from './save';\nimport load from './load';\nimport { HeavenlyUpgrades } from './customFuncs';\n\nconst CCRedditMod: CustomMod = {\n init,\n save,\n load,\n HeavenlyUpgrades,\n};\n\nGame.registerMod('ccreddit_mod', CCRedditMod);\n","import createHook from './createHook';\n\nconst init = (): void => {\n createHook();\n};\n\nexport default init;\n","import { HeavenlyUpgrades } from 'customFuncs';\n\nconst createHook = (): void => {\n HeavenlyUpgrades([\n  {\n   name: 'Misfortune cookies',\n   description: 'The news ticker may occasionally have <b>misfortunes</b>, which may be clicked for \"something\".',\n   quote: '',\n   price: 66666666666,\n   icon: [0, 1],\n   parents: ['Distilled essence of redoubled luck'],\n   position: [75, 495],\n   order: 644,\n  },\n ]);\n};\n\nexport default createHook;\n","const save = (): string => {\n const saveObj: ISave = {\n  boughtUpgrades: [],\n  unlockedUpgrades: [],\n };\n\n Game.UpgradesById.forEach(upgrade => {\n  if (upgrade.mod === 'ccreddit_mod') {\n   if (upgrade.bought) {\n    saveObj.boughtUpgrades.push(upgrade.name);\n   }\n\n   if (!upgrade.bought && upgrade.unlocked) {\n    saveObj.unlockedUpgrades.push(upgrade.name);\n   }\n  }\n });\n\n return JSON.stringify(saveObj);\n};\n\nexport default save;\n","const load = (saveString: string): void => {\n const save: ISave = JSON.parse(saveString);\n\n save.unlockedUpgrades.forEach(upgrade => {\n  Game.Unlock(upgrade);\n });\n save.boughtUpgrades.forEach(upgrade => {\n  Game.Upgrades[upgrade].bought = 1;\n });\n};\n\nexport default load;\n"],"sourceRoot":""}